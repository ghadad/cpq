version: "3.4"

x-common-variables: &common-variables
  MYSQL_USER: sampleuser
  MYSQL_PASSWORD: samplepassword
  MYSQL_DATABASE: sampledb
  FASTIFY_PORT: 8000
  CLIENT_PORT: 3000
  NODE_ENV: development
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
      - "443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default
      - ./nginx/nginx.conf:/etc/nginx/sites-available/default
    networks:
      - server
  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - ./db/pg_sample.sql:/docker-entrypoint-initdb.d/create_tables.sql
    env_file: ./docker.env/postgres.env
  mysql:
    image: mysql:5.7
    env_file: ./docker.env/mysql.env
    networks:
      - backend
    #   ports:
    #     - 3307:3306
    restart: unless-stopped
    volumes:
      - ./db/sample.sql:/docker-entrypoint-initdb.d/sample.sql
      - pgdata:/var/lib/postgresql/data
  phpmyadmin:
    depends_on:
      - mysql
    image: phpmyadmin/phpmyadmin
    env_file: ./docker.env/phpmyadmin.env
    networks:
      - backend
    ports:
      - 9000:80
    restart: always
  server:
    build: ./server
    depends_on:
      - mysql
    expose:
      - 9000
    env_file:
      - ./docker.env/app.env
      - ./docker.env/phpmyadmin.env
    ports:
      - 8000:8000
    volumes:
      - ./server:/app
    networks:
      - backend
    entrypoint:
      - npm
      - run
      - dev
  client:
    build: ./client
    env_file: ./docker.env/app.env
    expose:
      - 3000
    ports:
      - 3000:3000
    volumes:
      - ./client:/app/client
    networks:
      - server
    #command: npm run start
    entrypoint:
      - npm
      - run
      - dev
networks:
  backend:
  server:
volumes:
  pgdata: {}
